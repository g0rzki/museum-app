// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using museum_app.Data;

#nullable disable

namespace museum_app.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("museum_app.Models.Exhibition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("description");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("enddate");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("startdate");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_exhibitions");

                    b.ToTable("exhibitions");
                });

            modelBuilder.Entity("museum_app.Models.TicketItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ExhibitionId")
                        .HasColumnType("integer")
                        .HasColumnName("exhibitionid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<int>("TicketOrderId")
                        .HasColumnType("integer")
                        .HasColumnName("ticketorderid");

                    b.Property<int>("TicketTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("tickettypeid");

                    b.HasKey("Id")
                        .HasName("pk_ticketitems");

                    b.HasIndex("ExhibitionId")
                        .HasDatabaseName("ix_ticketitems_exhibitionid");

                    b.HasIndex("TicketOrderId")
                        .HasDatabaseName("ix_ticketitems_ticketorderid");

                    b.HasIndex("TicketTypeId")
                        .HasDatabaseName("ix_ticketitems_tickettypeid");

                    b.ToTable("ticketitems");
                });

            modelBuilder.Entity("museum_app.Models.TicketOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("purchasedate");

                    b.HasKey("Id")
                        .HasName("pk_ticketorders");

                    b.ToTable("ticketorders");
                });

            modelBuilder.Entity("museum_app.Models.TicketType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.HasKey("Id")
                        .HasName("pk_tickettypes");

                    b.ToTable("tickettypes");
                });

            modelBuilder.Entity("museum_app.Models.TicketItem", b =>
                {
                    b.HasOne("museum_app.Models.Exhibition", "Exhibition")
                        .WithMany("TicketItems")
                        .HasForeignKey("ExhibitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_ticketitems_exhibitions_exhibitionid");

                    b.HasOne("museum_app.Models.TicketOrder", "TicketOrder")
                        .WithMany("TicketItems")
                        .HasForeignKey("TicketOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_ticketitems_ticketorders_ticketorderid");

                    b.HasOne("museum_app.Models.TicketType", "TicketType")
                        .WithMany("TicketItems")
                        .HasForeignKey("TicketTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_ticketitems_tickettypes_tickettypeid");

                    b.Navigation("Exhibition");

                    b.Navigation("TicketOrder");

                    b.Navigation("TicketType");
                });

            modelBuilder.Entity("museum_app.Models.Exhibition", b =>
                {
                    b.Navigation("TicketItems");
                });

            modelBuilder.Entity("museum_app.Models.TicketOrder", b =>
                {
                    b.Navigation("TicketItems");
                });

            modelBuilder.Entity("museum_app.Models.TicketType", b =>
                {
                    b.Navigation("TicketItems");
                });
#pragma warning restore 612, 618
        }
    }
}
